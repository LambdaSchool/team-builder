{"ast":null,"code":"var _jsxFileName = \"/home/mark/Repositories/team-builder/src/Members/Members.js\";\nimport React from \"react\"; // What data type is props?\n// it is an object!\n\nconst Members = props => {\n  console.log(props);\n  return React.createElement(\"div\", {\n    className: \"note-list\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, props.notesList.map(note => {\n    return React.createElement(\"div\", {\n      className: \"member\",\n      key: member.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18\n      },\n      __self: this\n    }, member.ic), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19\n      },\n      __self: this\n    }, member.name));\n  }));\n};\n\nexport default Members;","map":{"version":3,"sources":["/home/mark/Repositories/team-builder/src/Members/Members.js"],"names":["React","Members","props","console","log","notesList","map","note","member","id","ic","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CAEA;AACA;;AAEA,MAAMC,OAAO,GAAGC,KAAK,IAAI;AACvBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,SACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGA,KAAK,CAACG,SAAN,CAAgBC,GAAhB,CAAoBC,IAAI,IAAI;AAC3B,WACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAwB,MAAA,GAAG,EAAEC,MAAM,CAACC,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKD,MAAM,CAACE,EAAZ,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAIF,MAAM,CAACG,IAAX,CAFF,CADF;AAMD,GAPA,CANH,CADF;AAiBD,CAnBD;;AAqBA,eAAeV,OAAf","sourcesContent":["import React from \"react\";\n\n// What data type is props?\n// it is an object!\n\nconst Members = props => {\n  console.log(props);\n  return (\n    <div className=\"note-list\">\n      {/* How do we create individual notes for each object in the array? */}\n      {/* forEach will iterate over the entire array but since we want it to return something new we are going to use .map */}\n      {/* props is an object and we are grabbing the key notesList */}\n      {/* What arguement does map take? : a callback*/}\n      {/* our callback takes arguements as well: the items in the array (we will call note), the index if we needed it, and it could take the entire array */}\n      {props.notesList.map(note => {\n        return (\n          <div className=\"member\" key={member.id}>\n            <h2>{member.ic}</h2>\n            <p>{member.name}</p>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default Members;\n"]},"metadata":{},"sourceType":"module"}
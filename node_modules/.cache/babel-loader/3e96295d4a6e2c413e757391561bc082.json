{"ast":null,"code":"import _defineProperty from \"/home/mark/Repositories/team-builder/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/home/mark/Repositories/team-builder/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/mark/Repositories/team-builder/src/App.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\n\nconst NoteForm = props => {\n  console.log(props); //where should we store data that is going to change?\n  //IN our state\n  //  const [title, setTitle] = useState('')\n  //   const [desc, setDesc] = useState('')\n\n  const _useState = useState({\n    title: \"\",\n    body: \"\"\n  }),\n        _useState2 = _slicedToArray(_useState, 2),\n        note = _useState2[0],\n        setNote = _useState2[1];\n\n  const changeHandler = event => {\n    //computed properties\n    setNote(_objectSpread({}, note, {\n      [event.target.name]: event.target.value\n    }));\n    console.log(event.target.name);\n  };\n\n  const submitForm = event => {\n    event.preventDefault();\n\n    const newNote = _objectSpread({}, note, {\n      id: Date.now()\n    });\n\n    props.addNewNote(newNote);\n    setNote({\n      title: \"\",\n      body: \"\"\n    });\n  };\n\n  return (// note all the accessibility sides of forms\n    // Don't use the div, use the form element!\n    // what elements should we have in a form?// -input- with type =?\n    //look at https://developer.mozilla.org/en-US/docs/Web/HTML/Element/inputv\n    // -label\n    React.createElement(\"form\", {\n      onSubmit: submitForm,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    }, React.createElement(\"label\", {\n      htmlFor: \"title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, \"Note Title\"), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"title\" // value={title}\n      ,\n      value: note.title // onChange={event => {\n      //   //  What happens when we console.log the value?\n      //   //  React keeps changing our state back to the empty value. We need to use setTitle to update the state.\n      //   console.log(event.target.value);\n      //   //  setTitle(event.target.value)\n      // setNote({...note,  title: event.target.value });\n      // }}\n      ,\n      onChange: changeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }), React.createElement(\"label\", {\n      htmlFor: \"desc\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, \"Description\"), React.createElement(\"textarea\", {\n      name: \"body\",\n      placeholder: \"Type your note here\" // value={desc}\n      ,\n      value: note.body // onChange={event => {\n      //   console.log(event.target.value);\n      //   //  setDesc(event.target.value)\n      //   setNote({...note, desc: event.target.value});\n      // }}\n      ,\n      onChange: changeHandler,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"submit\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Add note\"))\n  );\n}; // Talk about controllled vs uncontrolled components\n//https://reactjs.org/docs/forms.html#controlled-components\n\n\nexport default NoteForm;","map":{"version":3,"sources":["/home/mark/Repositories/team-builder/src/App.js"],"names":["React","useState","NoteForm","props","console","log","title","body","note","setNote","changeHandler","event","target","name","value","submitForm","preventDefault","newNote","id","Date","now","addNewNote"],"mappings":";;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAEA,MAAMC,QAAQ,GAAGC,KAAK,IAAI;AACxBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ,EADwB,CAExB;AACA;AACA;AACA;;AALwB,oBAMAF,QAAQ,CAAC;AAC/BK,IAAAA,KAAK,EAAE,EADwB;AAE/BC,IAAAA,IAAI,EAAE;AAFyB,GAAD,CANR;AAAA;AAAA,QAMjBC,IANiB;AAAA,QAMXC,OANW;;AAWxB,QAAMC,aAAa,GAAGC,KAAK,IAAI;AAC7B;AACAF,IAAAA,OAAO,mBAAMD,IAAN;AAAY,OAACG,KAAK,CAACC,MAAN,CAAaC,IAAd,GAAqBF,KAAK,CAACC,MAAN,CAAaE;AAA9C,OAAP;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAYM,KAAK,CAACC,MAAN,CAAaC,IAAzB;AACD,GAJD;;AAMA,QAAME,UAAU,GAAGJ,KAAK,IAAI;AAC1BA,IAAAA,KAAK,CAACK,cAAN;;AACA,UAAMC,OAAO,qBACRT,IADQ;AAEXU,MAAAA,EAAE,EAAEC,IAAI,CAACC,GAAL;AAFO,MAAb;;AAIAjB,IAAAA,KAAK,CAACkB,UAAN,CAAiBJ,OAAjB;AACAR,IAAAA,OAAO,CAAC;AAAEH,MAAAA,KAAK,EAAE,EAAT;AAAaC,MAAAA,IAAI,EAAE;AAAnB,KAAD,CAAP;AACD,GARD;;AASA,SACE;AACA;AACA;AACA;AACA;AACA;AAAM,MAAA,QAAQ,EAAEQ,UAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAGE;AAAO,MAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAHF,EAOE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,IAAI,EAAC,OAFP,CAGE;AAHF;AAIE,MAAA,KAAK,EAAEP,IAAI,CAACF,KAJd,CAKE;AACA;AACA;AACA;AACA;AACA;AACA;AAXF;AAaE,MAAA,QAAQ,EAAEI,aAbZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAPF,EAsBE;AAAO,MAAA,OAAO,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAtBF,EAuBE;AACE,MAAA,IAAI,EAAC,MADP;AAEE,MAAA,WAAW,EAAC,qBAFd,CAGE;AAHF;AAIE,MAAA,KAAK,EAAEF,IAAI,CAACD,IAJd,CAKE;AACA;AACA;AACA;AACA;AATF;AAUE,MAAA,QAAQ,EAAEG,aAVZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAvBF,EAuCE;AAAQ,MAAA,IAAI,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAvCF;AANF;AAgDD,CA1ED,C,CA2EA;AACA;;;AACA,eAAeR,QAAf","sourcesContent":["import React, { useState } from \"react\";\n\nconst NoteForm = props => {\n  console.log(props);\n  //where should we store data that is going to change?\n  //IN our state\n  //  const [title, setTitle] = useState('')\n  //   const [desc, setDesc] = useState('')\n  const [note, setNote] = useState({\n    title: \"\",\n    body: \"\"\n  });\n\n  const changeHandler = event => {\n    //computed properties\n    setNote({ ...note, [event.target.name]: event.target.value });\n    console.log(event.target.name);\n  };\n\n  const submitForm = event => {\n    event.preventDefault();\n    const newNote = {\n      ...note,\n      id: Date.now()\n    };\n    props.addNewNote(newNote);\n    setNote({ title: \"\", body: \"\" });\n  };\n  return (\n    // note all the accessibility sides of forms\n    // Don't use the div, use the form element!\n    // what elements should we have in a form?// -input- with type =?\n    //look at https://developer.mozilla.org/en-US/docs/Web/HTML/Element/inputv\n    // -label\n    <form onSubmit={submitForm}>\n      {/* need htmlFor instead of for since it is a reserved keyword in JS */}\n      {/* htmlFor and name on the input go together */}\n      <label htmlFor=\"title\">Note Title</label>\n      {/* When we add the value nothing happens because we already set the value! */}\n      {/* show other kinds of inputs like option, select, textarea etc */}\n      {/* onChange takes a callback like other dom events */}\n      <input\n        type=\"text\"\n        name=\"title\"\n        // value={title}\n        value={note.title}\n        // onChange={event => {\n        //   //  What happens when we console.log the value?\n        //   //  React keeps changing our state back to the empty value. We need to use setTitle to update the state.\n        //   console.log(event.target.value);\n        //   //  setTitle(event.target.value)\n        // setNote({...note,  title: event.target.value });\n        // }}\n\n        onChange={changeHandler}\n      />\n      <label htmlFor=\"desc\">Description</label>\n      <textarea\n        name=\"body\"\n        placeholder=\"Type your note here\"\n        // value={desc}\n        value={note.body}\n        // onChange={event => {\n        //   console.log(event.target.value);\n        //   //  setDesc(event.target.value)\n        //   setNote({...note, desc: event.target.value});\n        // }}\n        onChange={changeHandler}\n      />\n\n      {/* We don't actually need a button, we could just press enter.\n     What happens when we press enter?\n     It refreshes our page by default */}\n      <button type=\"submit\">Add note</button>\n    </form>\n  );\n};\n// Talk about controllled vs uncontrolled components\n//https://reactjs.org/docs/forms.html#controlled-components\nexport default NoteForm;\n"]},"metadata":{},"sourceType":"module"}